@page "/histogram"
@rendermode InteractiveAuto
@using StatisticalTools;
@using BlazorBootstrap;
@attribute [StreamRendering(true)]
@namespace FinancialPlanner.Components.AppComponents

<table style="width: 20%;">
    <thead>
    </thead>
    <tbody>
        <tr>
            <td style="width: 20%;">
                <tiny>
                    <BarChart @ref="barChart" Width="500" Height="250" Class="mb-4" />
                </tiny>
            </td>
        </tr>
    </tbody>
</table>

@code {
    [Parameter]
    public HistogramBucket histogramBucket { get; set; }

    protected override async Task OnInitializedAsync()
    {

    }
    private BarChart barChart = default!;
    private BarChartOptions barChartOptions = default!;
    private ChartData chartData = default!;

    private int buckets = 31;

    private int maxRandom = 1000;

    private int datasetsCount = 0;
    private int bucketLabelsCount = 0;
    private Random random = new();

    protected override void OnInitialized()
    {
        if(this.histogramBucket!=null && this.histogramBucket.NumberOfBuckets>0)
        {
            buckets = this.histogramBucket.NumberOfBuckets;

        }
        chartData = new ChartData { Labels = GetDefaultDataLabels(buckets), Datasets = GetDefaultDataSets(1) };
        barChartOptions = new BarChartOptions { Responsive = true, Interaction = new Interaction { Mode = InteractionMode.Index } };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await barChart.InitializeAsync(chartData, barChartOptions);
        }
        await base.OnAfterRenderAsync(firstRender);

        InitializeDataAsync();
    }

    private async Task InitializeDataAsync()
    {
        try
        {
            foreach (BarChartDataset dataset in chartData.Datasets)
            {
                List<double> updateDataPoints = new List<double>();

                updateDataPoints = LoadChartData();

                dataset.Data = updateDataPoints;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        barChartOptions.IndexAxis = "x";
        await barChart.UpdateAsync(chartData, barChartOptions);
    }

    private List<IChartDataset> GetDefaultDataSets(int numberOfDatasets)
    {
        var datasets = new List<IChartDataset>();

        for (var index = 0; index < numberOfDatasets; index++)
        {
            datasets.Add(GetRandomBarChartDataset());
        }

        return datasets;
    }

    private BarChartDataset GetRandomBarChartDataset()
    {
        var c = ColorBuilder.CategoricalTwelveColors[datasetsCount].ToColor();

        datasetsCount += 1;

        return new BarChartDataset()
            {
                Label = $"Age When Account Balance Goes To 0",
                Data = LoadChartData(),
                BackgroundColor = new List<string> { c.ToRgbString() },
                BorderColor = new List<string> { c.ToRgbString() },
                BorderWidth = new List<double> { 0 },
            };
    }

    private List<double> LoadChartData()
    {
        var data = new List<double>();
        for (var index = 0; index < bucketLabelsCount; index++)
        {
            data.Add(this.histogramBucket.buckets[index].Count);
        }
        return data;
    }

    private List<string> GetDefaultDataLabels(int numberOfLabels)
    {
        var labels = new List<string>();

        foreach (HistogramBucket.IntegerBucket bucket in this.histogramBucket.buckets)
        {
            labels.Add(bucket.DisplayLabel);
            bucketLabelsCount++;
        }

        return labels;
    }
}
