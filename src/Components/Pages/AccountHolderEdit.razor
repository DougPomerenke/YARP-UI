@page "/accountholderedit"
@page "/accountholderedit/{id:Guid}"
@rendermode InteractiveServer
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Net.Http.Headers
@using FinancialPlanner.Components.Models;
@using FinancialPlanner.Services;
@inject NavigationManager NavigationManager
@inject IHttpClientFactory ClientFactory
@inject IAccountHolderService AccountHolderService




@if (Id == null)
{
    <PageTitle>Create a new Account Holder</PageTitle>
    <h1>Create a new Account Holder</h1>
}
else
{
    <PageTitle>Edit Account Holder</PageTitle>
    <h1>Edit Account Holder</h1>
}

@if (_render)
{
    <EditForm Model="@AccountHolderModel" OnSubmit="HandleSubmit">

        <div>
            <label for="firstname">First Name</label>
            <InputText id="firstname" @bind-Value="AccountHolderModel.FirstName" class="form-control"></InputText>
        </div>
        <div>
            <label for="lastname">Last Name</label>
            <InputText id="lastname" @bind-Value="AccountHolderModel.LastName" class="form-control"></InputText>
        </div>

        <div>
            <label for="dateofbirth">Date Of Birth</label>
            <InputText id="dateofbirth" @bind-Value="AccountHolderModel.DateOfBirth" class="form-control"></InputText>
        </div>

        <div>
            <label for="accountstartingbalance">Account Starting Balance</label>
            <InputNumber id="accountstartingbalance" @bind-Value="AccountHolderModel.AccountStartingBalance" class="form-control"></InputNumber>
        </div>
        <div><p></p></div>
        <h2>Scenarios</h2>
             <div>
        <label for="name">Scenario Name</label>
        <InputText id="name" @bind-Value="AccountHolderModel.Scenarios[0].Name" class="form-control"></InputText>
    </div>
        
    <div>
        <label for="retirementage">Retirement Age</label>
        <InputNumber id="retirementage" @bind-Value="AccountHolderModel.Scenarios[0].RetirementAge" class="form-control"></InputNumber>
    </div>

            <div>
        <label for="socialsecuritypayoutage">Social Security Payout Age</label>
    <InputNumber id="socialsecuritypayoutage" @bind-Value="AccountHolderModel.Scenarios[0].SocialSecurityPayoutAge" class="form-control"></InputNumber>
    </div>

            <div>
        <label for="expectedmonthlyretirementincome">Expected Monthly Retirement Income</label>
    <InputNumber id="expectedmonthlyretirementincome" @bind-Value="AccountHolderModel.Scenarios[0].ExpectedMonthlyRetirementIncome" class="form-control"></InputNumber>
    </div>

            <div>
        <label for="preretirementmonthlysavingscontribution">Pre Retirement Monthly Savings Contribution</label>
    <InputNumber id="preretirementmonthlysavingscontribution" @bind-Value="AccountHolderModel.Scenarios[0].PreRetirementMonthlySavingsContribution" class="form-control"></InputNumber>
    </div>
        <div><p></p></div>
        <h2>Financial Events</h2>

    <div>
        @foreach (var financialEvent in AccountHolderModel.FinancialEvents)
        {
            <tr>
                <div>
                <td><InputText id="lifeeventdisplaymessage" @bind-Value="financialEvent.Type" class="form-control"></InputText></td>
                <td><InputNumber id="lifeeventstartingyear" @bind-Value="financialEvent.Year" class="form-control"></InputNumber></td>
                <td><InputNumber id="payloaditem0" @bind-Value="financialEvent.Payload[0]" class="form-control"></InputNumber></td>
                @if(financialEvent.Payload.Length>1)
                        {
                    <td><InputNumber id="payloaditem1" @bind-Value="financialEvent.Payload[1]" class="form-control"></InputNumber></td>
                        }
                </div>
            </tr>
        }
        </div>

        <button type="submit" class="btn btn-primary" @onclick="HandleSubmit">Update Account Holder</button>
        <button type="button" class="btn btn-danger" @onclick="DeleteAccountHolder">Delete Account Holder</button>
    </EditForm>

}


@code {
    [Parameter]
    public string? Id { get; set; }

    [SupplyParameterFromForm]
    public AccountHolder? AccountHolderModel { get; set; }

    private bool _render;

    protected override void OnInitialized() => AccountHolderModel ??= new();

    protected override async Task OnParametersSetAsync()
    {
        if (Id == null)
        {
            //accountHolder.FinancialEvents = AccountHolderService.
            //hero.ComicId = hero.Comic.Id;
        }
        else
        {
            AccountHolderModel = await AccountHolderService.GetAccountHolder(Id);

            string scenarioSetName = AccountHolderModel.Scenarios[0].Name;
            string scenarioPreRetirementMonthlySavingsContribution = AccountHolderModel.Scenarios[0].PreRetirementMonthlySavingsContribution.ToString();
            string scenarioRetirementAge = AccountHolderModel.Scenarios[0].RetirementAge.ToString();
            string scenarioSocialSecurityPayoutAge = AccountHolderModel.Scenarios[0].SocialSecurityPayoutAge.ToString();
            string scenarioExpectedMonthlyRetirementIncome = AccountHolderModel.Scenarios[0].ExpectedMonthlyRetirementIncome.ToString();

            int financialEventCount = AccountHolderModel.FinancialEvents.Count;

            decimal eventStartYear = AccountHolderModel.FinancialEvents[0].Year;
            string eventType = AccountHolderModel.FinancialEvents[0].Type;
            decimal[] payload0 = AccountHolderModel.FinancialEvents[0].Payload;
            decimal[] payload1 = AccountHolderModel.FinancialEvents[1].Payload;

            if(AccountHolderModel.Scenarios!=null && AccountHolderModel.FinancialEvents!=null)
            {
                _render = true;
            }
        }
    }

    async Task HandleSubmit()
    {
        if (Id == null)
        {
            await AccountHolderService.CreateAccountHolder(AccountHolderModel);
        }
        else
        {
            await AccountHolderService.UpdateAccountHolder(AccountHolderModel);
        }
    }

    async Task DeleteAccountHolder()
    {
        await AccountHolderService.DeleteAccountHolder(AccountHolderModel.id);
    }

}
