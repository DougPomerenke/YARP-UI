@page "/accountholderedit"
@page "/accountholderedit/{id:Guid}"
@rendermode InteractiveServer
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Net.Http.Headers
@using FinancialPlanner.Components.Models;
@using FinancialPlanner.Services;
@inject NavigationManager NavigationManager
@inject IHttpClientFactory ClientFactory
@inject IAccountHolderService AccountHolderService




@if (Id == null)
{
    <PageTitle>Create a new Account Holder</PageTitle>
    <h1>Create a new Account Holder</h1>
}
else
{
    <PageTitle>Edit Account Holder</PageTitle>
    <h1>Edit Account Holder</h1>
}

@if (_render)
{
    <EditForm method="post" Model="AccountHolderModel" >
        <DataAnnotationsValidator />
        <div class="mb-2">
            <label for="firstname" class="form-label">First Name</label>
            <InputText id="firstname" @bind-Value="AccountHolderModel!.FirstName" class="form-control" />
            <ValidationMessage For="() => AccountHolderModel.FirstName" class="text-danger" />
        </div>
        <div class="mb-2">
            <label for="lastname" class="form-label">Last Name</label>
             <InputText id="lastname" @bind-Value="AccountHolderModel!.LastName" class="form-control"></InputText>
            <ValidationMessage For="() => AccountHolderModel.LastName" class="text-danger" />
        </div>
        <div class="mb-2">
            <label for="dateofbirth" class="form-label">Date of Birth</label>
            <InputText id="dateofbirth" @bind-Value="AccountHolderModel!.DateOfBirth" class="form-control"></InputText>
            <ValidationMessage For="() => AccountHolderModel.DateOfBirth" class="text-danger" />
        </div>
        <div class="mb-2">
            <label for="accountstartingbalance" class="form-label">Account Starting Balance</label>
            <InputNumber id="accountstartingbalance" @bind-Value="AccountHolderModel!.AccountStartingBalance" class="form-control"></InputNumber>
            <ValidationMessage For="() => AccountHolderModel.AccountStartingBalance" class="text-danger" />
        </div>

        <Accordion AlwaysOpen=true>

        <AccordionItem>
            <TitleTemplate><Icon Name="IconName.Toggles" Class="me-1" />Scenarios</TitleTemplate>
            <Content>
                <table class="table table-bordered">
                <thead>
                    <tr>
                    <th>Scenario Name</th>
                    <th>Retirement Age</th>
                    <th>Social Security Payout Age</th>
                    <th>Expected Monthly Retirement Income</th>
                    <th>Pre Retirement Monthly Savings Contribution</th>
                    </tr>
                </thead>
                <tbody>
                @foreach (var scenario in AccountHolderModel!.Scenarios)
                {
                    <tr>
                        <td><InputText  @bind-Value="scenario!.Name" class="form-control"></InputText></td>
                        <td><InputNumber  @bind-Value="scenario!.RetirementAge" class="form-control"></InputNumber></td>
                        <td><InputNumber  @bind-Value="scenario!.SocialSecurityPayoutAge" class="form-control"></InputNumber></td>
                        <td><InputNumber  @bind-Value="scenario!.ExpectedMonthlyRetirementIncome" class="form-control"></InputNumber></td>
                        <td><InputNumber  @bind-Value="scenario!.PreRetirementMonthlySavingsContribution" class="form-control"></InputNumber></td>
                     </tr>
                }
                </tbody>
                </table>

            </Content>
        </AccordionItem>

        <AccordionItem>
            <TitleTemplate><Icon Name="IconName.Toggles" Class="me-1" />Financial Events</TitleTemplate>
        <Content>
            <table class="table table-bordered">
                <thead>
                    <tr>
                    <th>Event Type</th>
                    <th>Starting Year</th>
                    <th>Value</th>
                    <th>Value</th>
                    </tr>
                </thead>
                <tbody>
                @foreach (var financialEvent in AccountHolderModel!.FinancialEvents)
                {
                    <tr>
                        <td><InputText id="lifeeventdisplaymessage" @bind-Value="financialEvent!.Type" class="form-control"></InputText></td>
                        <td><InputNumber id="lifeeventstartingyear" @bind-Value="financialEvent!.Year" class="form-control"></InputNumber></td>

                        @if(financialEvent.Type==FinancialEventType.InflationRateChange.ToString() || financialEvent.Type==FinancialEventType.InvestmentYieldChange.ToString() || financialEvent.Type==FinancialEventType.LoanPayOffYear.ToString())
                        {
                                <td><InputNumber id="payloaditem0" @bind-Value="financialEvent!.Payload[0]" class="form-control"></InputNumber></td>
                                @if(financialEvent.Payload.Length>1)
                                {
                                        <td><InputNumber id="payloaditem1" @bind-Value="financialEvent!.Payload[1]" class="form-control"></InputNumber></td>
                                }
                                else
                                {
                                    <td></td>
                                }
                                    <td><button type="button" class="btn btn-danger" value=@financialEvent!.Id @onclick="DeleteFinancialEvent">Delete</button></td>
                        }
                        else
                        {
                            <td></td><td></td>
                            <td><button type="button" class="btn btn-danger" value=@financialEvent!.Id @onclick="DeleteFinancialEvent">Delete</button></td>
                        }

                     </tr>
                }

                <tr>
                    <td></td>
                    <td>
                    <select class="select" id="selectfinancialevent" data-style="btn-success" @bind="selectedNewFinancialEventType" > Select New Financial Event >
                    <option value="">Select New Financial Event</option>
                    <option value="@FinancialEventType.StartingYear">@FinancialEventType.StartingYear</option>
                    <option value="@FinancialEventType.InflationRateChange">@FinancialEventType.InflationRateChange</option>
                    <option value="@FinancialEventType.InvestmentYieldChange">@FinancialEventType.InvestmentYieldChange</option>
                    <option value="@FinancialEventType.SavingChange">@FinancialEventType.SavingChange</option>
                    <option value="@FinancialEventType.LoanPayOffYear">@FinancialEventType.LoanPayOffYear</option>
                    </select>
                    </td>
                                       
                    <td>
                        <button type="submit" class="btn btn-primary" @onclick="HandleAddFinancialEvent">Add Financial Event</button>
                    </td>

                </tr>
                </tbody>
                </table>
@*                 <button type="submit" class="btn btn-primary" @onclick="HandleAddFinancialEvent">Add Financial Event</button> *@

@*             <div class="dropdown">
            <button type="button" class="btn btn-primary dropdown-toggle" data-bs-toggle="dropdown" @onclick="HandleAddFinancialEvent">Add Financial Event</button>
            <ul class="dropdown-menu">
                <li><a class="dropdown-item">@FinancialEventType.StartingYear</a></li>
                <li><a class="dropdown-item">@FinancialEventType.InflationRateChange</a></li>
                <li><a class="dropdown-item">@FinancialEventType.InflationRateChange</a></li>
                <li><a class="dropdown-item">@FinancialEventType.SavingChange</a></li>
                <li><a class="dropdown-item">@FinancialEventType.LoanPayOffYear</a></li>
            </ul>
            </div> *@




        </Content> 
        </AccordionItem>

         <AccordionItem>
            <TitleTemplate><Icon Name="IconName.Toggles" Class="me-1" />Social Security Payouts</TitleTemplate>
        <Content>
            <table class="table table-bordered">
            <thead>
                <tr>
                <th>Age</th>
                <th>Monthly Payment</th>
                </tr>
            </thead>
           <tbody>

            @foreach(SocialSecurityPayout po in AccountHolderModel.SocialSecurityPayouts)
            {
                <tr>
                <td><label class="form-control">@po.StartingAge</label></td>
                <td><InputNumber id="socialsecuritypayouts" @bind-Value="po.MonthlyPayout" class="form-control"></InputNumber></td>
                </tr>
            }
            </tbody>
            </table>
        </Content>
        </AccordionItem>

    </Accordion>

        <button type="submit" class="btn btn-primary" @onclick="HandleSubmit">@this.submitButtonCaption</button>
        <button type="button" class="btn btn-danger" @onclick="DeleteAccountHolder">Delete Account Holder</button>
    </EditForm>

}


@code {
    [Parameter]
    public string? Id { get; set; }

    [SupplyParameterFromForm]
    public AccountHolder? AccountHolderModel { get; set; } = new();

    private bool _render;
    private string submitButtonCaption;
    private int buttonEventCount;
    private string selectedNewFinancialEventType;


    protected override void OnInitialized() => AccountHolderModel ??= new();

    protected override async Task OnParametersSetAsync()
    {
        this.buttonEventCount = 0;

        if (Id == null)
        {
            AccountHolder newAccountHolder = new AccountHolder();

            AccountHolderModel = newAccountHolder;

            this.submitButtonCaption = "Save";

            if(AccountHolderModel.Scenarios!=null && AccountHolderModel.FinancialEvents!=null)
            {
                _render = true;
            }
        }
        else
        {
            this.submitButtonCaption = "Update";

            AccountHolderModel = await AccountHolderService.GetAccountHolder(Id);

            if(AccountHolderModel.Scenarios!=null && AccountHolderModel.FinancialEvents!=null)
            {
                _render = true;
            }
        }
    }

    async Task HandleSubmit()
    {
        this.buttonEventCount++;    //  Even is firing twice, causes problem when creating new.

        if (this.buttonEventCount == 1)
        {
            if (Id == null)
            {
                await AccountHolderService.CreateAccountHolder(AccountHolderModel);
            }
            else
            {
                await AccountHolderService.UpdateAccountHolder(AccountHolderModel);
            }
        }
    }

    async Task HandleAddFinancialEvent()
    {
        if(selectedNewFinancialEventType !=null)
        {
            FinancialEvent financialEvent = new FinancialEvent(selectedNewFinancialEventType);

            AccountHolderModel!.FinancialEvents.Add(financialEvent);
        }



        //_render = true;
    }

    async Task DeleteFinancialEvent()
    {
        this.buttonEventCount++;    //  Even is firing twice, causes problem when creating new.

        if (this.buttonEventCount == 1)
        {
            // Only working for the last financial event
            AccountHolderModel.FinancialEvents.Remove(AccountHolderModel.FinancialEvents[AccountHolderModel.FinancialEvents.Count-1]);

            await AccountHolderService.UpdateAccountHolder(AccountHolderModel);

        }      
    }

    async Task DeleteAccountHolder()
    {
        await AccountHolderService.DeleteAccountHolder(AccountHolderModel.id);
    }
        async Task HandleValidSubmit()
    {
        
    }
}
