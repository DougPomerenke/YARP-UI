@page "/manageaccountholders"
@using Microsoft.AspNetCore.Components.QuickGrid;
@rendermode InteractiveServer
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Net.Http.Headers
@using FinancialPlanner.Components.Models;
@using FinancialPlanner.Services;
@inject IHttpClientFactory ClientFactory
@attribute [StreamRendering(true)]


@if (getAccountHoldersError || this.accountHolders is null)
{
    <p>Unable to get account holders. Please try again later.</p>
}
else
{

    <small><table class="table" width="25%">
        <thead>
            <tr>
                    <th width="1">First Name</th>
                    <th width="1">Last Name</th>
                    <th width="1">Date Of Birth</th>
                    <th width="1">Account Staring Balance</th>
                    <th width="1">Retirement Age</th>
                    <th width="1">Expected Monthly Retirement Income</th>
                    <th width="1">Pre Retirement Monthly Savings Contribution</th>
                    <th width="1">Social Security Payout Age</th>
                    <th width="1">Financial Events</th>
            </tr>
        </thead>
        <tbody>
                @foreach (var accountHolder in this.accountHolders)
            {
                <tr>
                    <td>@accountHolder.FirstName</td>
                    <td>@accountHolder.LastName</td>
                    <td>@accountHolder.DateOfBirth</td>
                    <td>@accountHolder.AccountStaringBalance</td>
                    <td>@accountHolder.Scenario.RetirementAge</td>
                    <td>@accountHolder.Scenario.ExpectedMonthlyRetirementIncome</td>
                    <td>@accountHolder.Scenario.PreRetirementMonthlySavingsContribution</td>
                    <td>@accountHolder.Scenario.SocialSecurityPayoutAge</td>
                    <td>@accountHolder.FinancialEvents.Count</td>
                </tr>
            }
        </tbody>
    </table></small>
}

@if (getAccountHoldersError || accountHolderList is null)
{
    <p>Unable to get account holders. Please try again later.</p>
}
else
{
    <QuickGrid Items="@accountHolderList">
        <PropertyColumn Property="@(p => p.FirstName)" Sortable="true" />
        <PropertyColumn Property="@(p => p.LastName)" Sortable="true" />
        <PropertyColumn Property="@(p => p.DateOfBirth)" Sortable="true" />
    </QuickGrid>
}

@code {
    private bool shouldRender;

    private IEnumerable<AccountHolder>? accountHolders = Array.Empty<AccountHolder>();
    private IQueryable<AccountHolder>? accountHolderList;

    private bool getAccountHoldersError;
    private string accountHolderName;


    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        string pathSetting = _config.GetSection("ApiUrls:AllAccountHolders").Value;

        Uri uri = new Uri(pathSetting);

        var client = ClientFactory.CreateClient();

        var request = new HttpRequestMessage(HttpMethod.Get,uri);
        request.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
        //request.Content = new StringContent(inputs, System.Text.Encoding.UTF8);
        //request.Content.Headers.ContentType = new MediaTypeHeaderValue("application/json");

        try
        {
            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var content = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                using var responseStream = await response.Content.ReadAsStreamAsync();
                this.accountHolders = await JsonSerializer.DeserializeAsync<IEnumerable<AccountHolder>>(responseStream);

                //this.accountHolderList = await JsonSerializer.DeserializeAsync<IQueryable<AccountHolder>>(responseStream);

                int count = this.accountHolders.Count();
            }
            else
            {
                getAccountHoldersError = true;
            }
        }
        catch (Exception ex)
        {
            getAccountHoldersError = true;
            Console.WriteLine(ex.Message);
        }

        foreach (var accountHolder in this.accountHolders)
        {
            accountHolderName = accountHolder.LastName;
        }

        shouldRender = true;
    }


}