@page "/quickgrid"
@using Microsoft.AspNetCore.Components.QuickGrid;
@rendermode InteractiveServer
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Net.Http.Headers
@using FinancialPlanner.Components.Models;
@using FinancialPlanner.Services;
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavManager
@inject HttpClient Http
@attribute [StreamRendering(true)]


    <QuickGrid ItemsProvider="@accountHolderProvider">
    <PropertyColumn Property="@(p => p.FirstName)" Sortable="true" />
    <PropertyColumn Property="@(p => p.LastName)" Sortable="true" />
    <PropertyColumn Property="@(p => p.DateOfBirth)" Sortable="true" />
    <PropertyColumn Property="@(p => p.AccountStartingBalance)" Sortable="true" />
    <PropertyColumn Property="@(p => p.ScenarioSets[0].RetirementAge)" Sortable="true" />
    <PropertyColumn Property="@(p => p.ScenarioSets[0].ExpectedMonthlyRetirementIncome)" Sortable="true" />
    <PropertyColumn Property="@(p => p.ScenarioSets[0].PreRetirementMonthlySavingsContribution)" Sortable="true" />
    <PropertyColumn Property="@(p => p.ScenarioSets[0].SocialSecurityPayoutAge)" Sortable="true" />
    <PropertyColumn Property="@(p => p.FinancialEvents.Count)" Sortable="true" />
    </QuickGrid>


@code {
    private bool shouldRender;

    private GridItemsProvider<AccountHolder>? accountHolderProvider;

    private bool getAccountHoldersError;
    private string accountHolderName;


    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        string pathSetting = _config.GetSection("ApiUrls:AccountHolders").Value;

        try
        {
            accountHolderProvider = async req =>
            {
                var url = NavManager.GetUriWithQueryParameters(pathSetting, new Dictionary<string, object?>
                    {
                    { "skip", req.StartIndex },
                    { "limit", req.Count },
                    });

            var response = await Http.GetFromJsonAsync<List<AccountHolder>>(url, req.CancellationToken);
            return GridItemsProviderResult.From(
                items: response!,
                totalItemCount: response.Count);
        };

        }
        catch (Exception ex)
        {
            getAccountHoldersError = true;
            Console.WriteLine(ex.Message);
        }

        shouldRender = true;
    }


}